import os
from telegram import Bot
from telegram.error import TelegramError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env
        self.chat_id = os.getenv('TELEGRAM_CHAT_ID')  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env
        self.bot = Bot(token=self.token) if self.token else None
        self.scheduler = AsyncIOScheduler()
        self.scheduler.start()

    async def send_notification(self, message: str):
        if not self.bot:
            logger.warning("Telegram bot token not configured. Notification not sent.")
            return
            
        try:
            await self.bot.send_message(chat_id=self.chat_id, text=message)
            logger.info("Telegram notification sent successfully.")
        except TelegramError as e:
            logger.error(f"Failed to send Telegram notification: {e}")

    def schedule_reminder(self, appointment_info: dict):
        if not self.bot:
            return
            
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –ø—Ä–∏—ë–º–∞
        appointment_date = datetime.strptime(appointment_info['appointment_date'], "%Y-%m-%d %H:%M:%S")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ —Å—Ä–∞–∑—É
        immediate_message = (
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏—ë–º!\n"
            f"üè• –ë–æ–ª—å–Ω–∏—Ü–∞: {appointment_info['hospital_name']}\n"
            f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {appointment_info['doctor_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment_date.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appointment_date.strftime('%H:%M')}"
        )
        self.scheduler.add_job(
            self.send_notification,
            'date',
            run_date=datetime.now(),
            args=[immediate_message]
        )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –ø—Ä–∏—ë–º–∞
        reminder_date = appointment_date - timedelta(days=1)
        if reminder_date > datetime.now():
            reminder_message = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!\n"
                f"üè• –ë–æ–ª—å–Ω–∏—Ü–∞: {appointment_info['hospital_name']}\n"
                f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {appointment_info['doctor_name']}\n"
                f"üìÖ –î–∞—Ç–∞: {appointment_date.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {appointment_date.strftime('%H:%M')}"
            )
            self.scheduler.add_job(
                self.send_notification,
                'date',
                run_date=reminder_date,
                args=[reminder_message]
            )
    
    def start(self):
        if self.bot:
            self.scheduler.start()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
telegram_notifier = TelegramNotifier()